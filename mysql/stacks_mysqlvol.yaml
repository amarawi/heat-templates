HeatTemplateFormatVersion: 2012-12-12
Description: >
  Stacks web portal running on NeCTAR sa node for volume storage 
  access. The attached volume will be formatted and data on it will 
  be lost. For the information of Stacks, see 
  http://creskolab.uoregon.edu/stacks/
Parameters: 
  InstanceType: 
    Description: Size of the server to host Stacks web portal with stock MySQL and Apache and PHP 
    Type: String
    Default: m1.medium
    AllowedValues: [m1.small, m1.medium, m1.large]
    ConstraintDescription: must be a valid nova instance type.
  ImageId:
    Default: 96761a90-635b-4718-8deb-f4ff57632db4
    Description: > 
      NeCTAR CentOS 6.5 x86_64 or any RHE flavour images still 
      support command service. Always use image ID
    Type: String
  Version: 
    Type: String
    AllowedPattern: '[.0-9]*'
    ConstraintDescription: can contain only dot and numbers
    Description: >
      The version of Stacks is going to be installed. The version of 
      Stacks installed on web portal has to be matched to the 
      version installed on the machince running pipeline.
    MinLength: 3
    Default: '1.19'
  KeyName: 
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, dashes and underscores.
    Description: Name of an existing OpenStack KeyPair to enable SSH access to the instance.
    MaxLength: 64
    MinLength: 1
    Type: String
  DBRootPassword: 
    Default: admin
    NoEcho: true
    Description: Root password for MySQL
    Type: String
    MinLength: 5
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WebDBUser:
    Type: String
    Description: User name for PHP scripts accessing MySQL
    Default: php_user
    MinLength: 3
    MaxLength: 41
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, dashes and underscores.
  WebDBPassword:
    Type: String
    Default: phppassword
    NoEcho: true
    Description: Password for PHP scripts accessing MySQL
    MinLength: 5
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WebUser:
    Type: String
    Description: User name for accessing databases through web browser.
    Default: webstacks
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, dashes and underscores.
  WebPassword:
    Type: String
    Default: pass
    NoEcho: true
    Description: Password of user accessing databases through web browser.
    MinLength: 5
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  StacksUser:
    Type: String
    Description: User name for uploading data in to MySQL database.
    Default: stacksowner
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, dashes and underscores.
  StacksPassword:
    Type: String
    Default: pass
    NoEcho: true
    Description: Password of user uploading data in to MySQL database.
    MinLength: 5
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  VolumeID: 
    Description: ID of a volume to be mounted for MySQL server.
    Type: String
Resources:
  MountExisting:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: {Ref: StacksPortal}
      VolumeId: {Ref: VolumeID}
      Device: /dev/vdc
  ServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable SSH, MySQL t port 3306 and HTTP access
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '3306'
          IpProtocol: tcp
          ToPort: '3306'
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
  StacksPortal: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          files:
            /etc/my.cnf:
              content: |
                [mysqld]
                myisam-recover = BACKUP
                expire_logs_days = 10
                max_binlog_size = 100M
                datadir=/var/lib/mysql
                socket=/var/lib/mysql/mysql.sock
                user=mysql
                key-buffer-size = 3G
                myisam-recover = FORCE,BACKUP
                innodb_file_per_table = 1
                innodb_log_file_size = 32M #Small log files, more page flush
                innodb_log_buffer_size=8M
                innodb-flush-method = O_DIRECT
                # Disabling symbolic-links is recommended to prevent assorted security risks
                symbolic-links=0

                [mysqld_safe]
                log-error=/var/log/mysqld.log
                pid-file=/var/run/mysqld/mysqld.pid
            /home/ec2-user/.my.cnf:
              content: |
                [client]
                user=root
                password=rootpasswd
                host=localhost
                port=3306
              owner: ec2-user
              group: ec2-user
              mode:  "000660" 
            /home/ec2-user/add_db.sh:
              content: |
                #!/bin/bash
                dbname=$1
                dbowner=DBOWNER

                if [ $# != 1 ];then
                  echo "It needs one argument: db_prefix."
                  exit 1
                fi

                cat << EOF | mysql mysql
                CREATE DATABASE ${dbname}_radtags;
                use ${dbname}_radtags;
                source /usr/local/share/stacks/sql/stacks.sql;
                use mysql;
                # Grant access accesses to an existing user
                GRANT ALL ON ${dbname}_radtags.* TO '$dbowner'@'%';
                GRANT SELECT ON ${dbname}_radtags.* TO 'php_user'@'localhost'; 
                GRANT UPDATE ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                GRANT DELETE ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                GRANT INSERT ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                FLUSH PRIVILEGES;
                exit
                EOF

                echo "The name of database is ${dbname}_radtags."
                echo "The owner of the database is $dbowner."
                echo -e "\tUse this from the remote machine running pipeline to upload data for display."
              owner: ec2-user
              group: ec2-user
              mode:  "000700"
            /tmp/set_auth_digest:
              content: |
                #!/usr/bin/expect 
                set user [lindex $argv 0] 
                set pass [lindex $argv 1] 
                spawn htdigest -c /usr/local/share/stacks/php/stack_auth_digest stacks $user
                expect "password:"
                send "$pass\r"
                expect "password:"
                send "$pass\r"
                expect "#"
              owner: root
              group: root
              mode:  "000700"
            /etc/httpd/conf.d/site_global.conf:
              content: |
                <Location />
                    AuthType Digest 
                    AuthName "stacks" 
                    AuthDigestProvider file 
                    AuthUserFile /usr/local/share/stacks/php/stack_auth_digest 
                    Require valid-user 
                </Location>               
              owner: root
              group: root
              mode:  "000644"
            /etc/httpd/conf.d/stacks.conf:
              content: |
                Alias /stacks "/usr/local/share/stacks/php"
              owner: root
              group: root
              mode:  "000644"
            /var/www/html/.my.cnf:
              content: |
                [client]
                user=DBOWNER
                password=STACKSPWD
                host=SERVERIP
                port=3306
              owner: root
              group: root
              mode:  "000644"
          packages: 
            yum:
              man: []
              expect: []
              screen: [] 
              vim-enhanced: []
              sysstat: []
              at: []
              httpd: []
              php: []
              php-pear-MDB2-Driver-mysql: []
              perl-Spreadsheet-WriteExcel: []
              mysql: []
              mysql-server: []
              gcc-c++: []
              samtools: []
              samtools-devel: []
              zlib-devel: []
              sparsehash-devel: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
              mysqld: 
                enabled: true
                ensureRunning: true
    Properties: 
      ImageId: 
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      KeyName: 
        Ref: KeyName
      SecurityGroups: [{Ref: ServerSecurityGroup}] 
      AvailabilityZone: sa 
      UserData: 
        Fn::Base64: 
           Fn::Replace:
            - AWS::StackName: {Ref: 'AWS::StackName'}
              dbrootpwd: {Ref: DBRootPassword}
              stack_version: {Ref: Version}
              web_db_user: {Ref: WebDBUser}
              webdbuserpass: {Ref: WebDBPassword}
              web_user: {Ref: WebUser}
              webuserpass: {Ref: WebPassword}
              stacksuser: {Ref: StacksUser}
              stackspasswd: {Ref: StacksPassword}
            - |
                #!/bin/bash
                yum update -y
                /usr/bin/cfn-init -s AWS::StackName -r StacksPortal 

                service mysqld stop
                # Wait for the working volume to appear: my own tesing version. volume is for copying data 
                while [ ! -e /dev/vdc ]; do echo Waiting for volume to attach; sleep 1; done
                mkfs.ext4 /dev/vdc
                echo '/dev/vdc /var/lib/mysql ext4 defaults,auto,noatime 0 0' >> /etc/fstab
                mount /dev/vdc /var/lib/mysql
                service mysqld start
                chown root:root /var/lib/mysql/lost+found

                # Setup MySQL root password 
                mysqladmin -u root password dbrootpwd
                # web_db_user:webdbuserpass created in mysqld and used in contstants.php
                cat << EOF | mysql -u root --password=dbrootpwd
                # remove anonymous users, create web db user, no client user accounts created
                # stacksuser is the owner of new databases of _radtags
                DELETE FROM mysql.user WHERE User='';
                DROP DATABASE test;
                CREATE USER 'stacksuser'@'%' IDENTIFIED BY 'stackspasswd';
                GRANT SELECT ON *.* TO 'web_db_user'@'localhost' IDENTIFIED BY 'webdbuserpass';
                FLUSH PRIVILEGES;
                exit
                EOF
                sed -i s/rootpasswd/dbrootpwd/ /home/ec2-user/.my.cnf
                # Make add_db.sh knows which user owns the new databases
                sed -i s/DBOWNER/stacksuser/ /home/ec2-user/add_db.sh

                # compile Stacks
                ln -s /usr/lib64/libbam.so /usr/lib/libbam.a

                wget http://creskolab.uoregon.edu/stacks/source/stacks-stack_version.tar.gz
                tar zxf stacks-stack_version.tar.gz 
                cd stacks-stack_version
                sed -i "s/bam\.h/samtools\/bam\.h/" src/BamI.h
                grep -rl '<sparsehash/sparse_hash_map>' src/*.h | xargs sed -i "s,sparsehash/sparse_hash_map,google/sparse_hash_map,"
                ./configure --enable-sparsehash --enable-bam 
                make install

                cp /usr/local/share/stacks/php/constants.php.dist /usr/local/share/stacks/php/constants.php
                sed -i -e "s/dbuser/web_db_user/" -e "s/dbpass/webdbuserpass/" /usr/local/share/stacks/php/constants.php
                chown :apache /usr/local/share/stacks/php/export
                chmod g+w /usr/local/share/stacks/php/export
                /tmp/set_auth_digest web_user webuserpass
                rm /tmp/set_auth_digest
                service httpd restart
                
                # enble exporting scripts to access databases:
                cp /usr/local/share/stacks/sql/mysql.cnf.dist /usr/local/share/stacks/sql/mysql.cnf
                sed -i -e "s/dbuser/web_db_user/" -e "s/dbpass/webdbuserpass/" /usr/local/share/stacks/sql/mysql.cnf
                
                iip=`curl -s http://169.254.169.254/2009-04-04/meta-data/local-ipv4`
                sed -i -e s,stackshost.edu/,$iip/, -e s,@stackshost.edu,@ersa.edu.au, /usr/local/bin/stacks_export_notify.pl
                sed -i -e s/SERVERIP/$iip/ -e s/DBOWNER/stacksuser/ -e s/STACKSPWD/stackspasswd/ /var/www/html/.my.cnf 

Outputs: 
  AccessURL: 
    Description: 'Stacks database and web server is ruuning on NeCTAR sa node. Before uploading data from pipeline, use /home/ec2-user/add_db.sh to add new databases. To view uploaded data, go:'
    Value: 
      Fn::Join: 
        - ''
        -
          - http://
          - {'Fn::GetAtt': [StacksPortal, PublicIp]}
          - /stacks
  UserName: 
    Description: 'Username for accessing above URL is:'
    Value: {Ref: WebUser}
  MyCNF: 
    Description: 'The config file of mysql for the machine running pipeline'
    Value: 
      Fn::Join: 
        - ''
        -
          - http://
          - {'Fn::GetAtt': [StacksPortal, PublicIp]}
          - '/.my.cnf'
