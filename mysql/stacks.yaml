HeatTemplateFormatVersion: 2012-12-12
Description: >
  Stacks web portal. http://creskolab.uoregon.edu/stacks/
Parameters: 
  InstanceType: 
    Description: Stacks web portal - Stock MySQL and Apache and PHP 
    Type: String
    Default: m1.small
    AllowedValues: [m1.small, m1.medium, m1.large]
    ConstraintDescription: must be a valid nova instance type.
  ImageId:
   # For all NeCTAR images, only this image works with service command 
    Default: 96761a90-635b-4718-8deb-f4ff57632db4
    Description: > 
      NeCTAR CentOS 6.5 x86_64 or any RHE flavour images still 
      support command service. Always use image ID
    Type: String
  Version: 
    AllowedPattern: '[.0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, spaces, dashes and underscores.
    Description: >
      The version of Stacks is going to be installed. Different 
      versions of SQL and PHP can be different and need to be 
      matched with Stack running on client. 
    MaxLength: 64
    MinLength: 1
    Type: String
  KeyName: 
    AllowedPattern: '[-_ a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, spaces, dashes and underscores.
    Description: Name of an existing OpenStack KeyPair to enable SSH access to the instance.
    MaxLength: 64
    MinLength: 1
    Type: String
  DBRootPassword: 
    Default: admin
    NoEcho: true
    Description: Root password for MySQL
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WebDBUser:
    Type: String
    Description: User name for PHP scripts accessing MySQL
    Default: php_user
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[-_a-zA-Z]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WebDBPassword:
    Type: String
    Default: phppassword
    NoEcho: true
    Description: Password for PHP scripts accessing MySQL
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  StackUser:
    Type: String
    Description: User name for PHP scripts accessing MySQL
    Default: stack
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  StackPassword:
    Type: String
    Default: stackpassword
    NoEcho: true
    Description: Password for PHP scripts accessing MySQL
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  DBServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable SSH access, MySQL assess at port 3306 and HTTP
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - 
          CidrIp: 0.0.0.0/0
          FromPort: '3306'
          IpProtocol: tcp
          ToPort: '3306'
  StacksPortal: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          files:
            /etc/my.cnf:
              content: |
                [mysqld]
                myisam-recover = BACKUP
                expire_logs_days = 10
                max_binlog_size = 100M
                datadir=/var/lib/mysql
                socket=/var/lib/mysql/mysql.sock
                user=mysql
                key-buffer-size = 3G
                myisam-recover = FORCE,BACKUP
                innodb_file_per_table = 1
                innodb_log_file_size = 32M #Small log files, more page flush
                innodb_log_buffer_size=8M
                innodb-flush-method = O_DIRECT
                # Disabling symbolic-links is recommended to prevent assorted security risks
                symbolic-links=0

                [mysqld_safe]
                log-error=/var/log/mysqld.log
                pid-file=/var/run/mysqld/mysqld.pid
          packages: 
            yum: 
              vim-enhanced: []
              httpd: []
              php: []
              php-pear-MDB2-Driver-mysql: []
              perl-Spreadsheet-WriteExcel: []
              mysql: []
              mysql-server: []
              gcc-c++: []
              samtools: []
              samtools-devel: []
              zlib-devel: []
              sparsehash-devel: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
              mysqld: 
                enabled: true
                ensureRunning: true
    Properties: 
      ImageId: 
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      KeyName: 
        Ref: KeyName
      SecurityGroups: [{Ref: DBServerSecurityGroup}] 
      UserData: 
        Fn::Base64: 
           Fn::Replace:
            - AWS::StackName: {Ref: 'AWS::StackName'}
              dbrootpwd: {Ref: DBRootPassword}
              stack_version: {Ref: Version}
              stack_user: {Ref: StackUser}
              stack_pass: {Ref: StackPassword}
              web_db_user: {Ref: WebDBUser}
              web_db_user_pass: {Ref: WebDBPassword}
            - |
                #!/bin/bash -v
                yum update -y
                /usr/bin/cfn-init -s AWS::StackName -r StacksPortal 

                # Setup MySQL root password 
                mysqladmin -u root password dbrootpwd
                # web_db_user:web_db_user_pass created in mysqld and used in contstants.php
                cat << EOF | mysql -u root --password=dbrootpwd
                # remove anonymous users, create web db user, no client user accounts created
                DELETE FROM mysql.user WHERE User='';
                DROP DATABASE test;
                GRANT SELECT ON *.* TO 'web_db_user'@'localhost' IDENTIFIED BY 'web_db_user_pass';
                FLUSH PRIVILEGES;
                exit
                EOF

#                sed -i.orig "s/\(\[mysqld\]\)/\1\nmyisam-recover = BACKUP\nexpire_logs_days = 10\nmax_binlog_size = 100M\ninnodb_file_per_table = 1/" /etc/my.cnf
#                service mysqld restart

                # compile Stacks
                ln -s /usr/lib64/libbam.so /usr/lib/libbam.a

                wget http://creskolab.uoregon.edu/stacks/source/stacks-stack_version.tar.gz
                tar zxf stacks-stack_version.tar.gz 
                cd stacks-stack_version
                sed -i "s/bam\.h/samtools\/bam\.h/" src/BamI.h
                grep -rl '<sparsehash/sparse_hash_map>' src/*.h | xargs sed -i "s,sparsehash/sparse_hash_map,google/sparse_hash_map,"
                ./configure --enable-sparsehash --enable-bam 
                make install

                cp /usr/local/share/stacks/php/constants.php.dist /usr/local/share/stacks/php/constants.php
                sed -i -e "s/dbuser/web_db_user/" -e "s/dbpass/web_db_user_pass/" /usr/local/share/stacks/php/constants.php
                cat << EOF > /etc/httpd/conf.d/stacks.conf
                #<Directory "/usr/local/share/stacks/php">
                #  Order deny,allow
                #  Allow all
                #</Directory> 
                Alias /stacks "/usr/local/share/stacks/php"
                EOF
                chown :apache /usr/local/share/stacks/php/export
                chmod g+w /usr/local/share/stacks/php/export
                service httpd restart
                
                # Create script for adding database and user for Stacks running remotely
                (
                cat <<'INEOF'
                #!/bin/bash
                dbname=$1
                dbowner=$2
                theirpwd=$3

                if [ $# != 3 ];then
                  echo "It needs exact three args: db_name, owner, password. $# given."
                  exit 1
                fi

                echo "Please provide MySQL root user password below."
                cat << EOF | mysql -u root mysql -p
                CREATE DATABASE ${dbname}_radtags;
                use ${dbname}_radtags;
                source /usr/local/share/stacks/sql/stacks.sql;
                use mysql;
                # assume this is the first time, otherwise, create user
                GRANT ALL ON ${dbname}_radtags.* TO '$dbowner'@'%' IDENTIFIED BY '$theirpwd';
                GRANT SELECT ON ${dbname}_radtags.* TO 'php_user'@'localhost'; 
                GRANT UPDATE ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                GRANT DELETE ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                GRANT INSERT ON ${dbname}_radtags.catalog_annotations TO 'php_user'@'localhost';
                FLUSH PRIVILEGES;
                exit
                EOF
                INEOF
                ) > /home/user/ec2-user/add_db.sh
                chown ec2-user /home/user/ec2-user/add_db.sh
                chmod u+x /home/user/ec2-user/add_db.sh

Outputs: 
  AccessURL: 
    Description: 'Access Stacks: '
    Value: 
    Value: 
      Fn::Join: 
        - ''
        -
          - http://
          - {'Fn::GetAtt': [StacksPortal, PublicIp]}
          - /stacks
